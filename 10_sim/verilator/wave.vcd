$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module $rootio $end
 $upscope $end
 $scope module controller_tb $end
  $var wire 7 # op [6:0] $end
  $var wire 3 $ funct3 [2:0] $end
  $var wire 1 % funct7b5 $end
  $var wire 1 & ZeroE $end
  $var wire 1 ' BranchE $end
  $var wire 1 ( JumpE $end
  $var wire 1 ) ALUResultEb0 $end
  $var wire 12 * funct12 [11:0] $end
  $var wire 2 3 ResultSrcD [1:0] $end
  $var wire 2 4 ALUSrcD [1:0] $end
  $var wire 1 5 MemWriteD $end
  $var wire 1 + PCSrcE $end
  $var wire 1 6 RegWriteD $end
  $var wire 1 7 JumpD $end
  $var wire 1 8 BranchD $end
  $var wire 3 9 ImmSrcD [2:0] $end
  $var wire 4 : ALUControlD [3:0] $end
  $var wire 1 , Ecall $end
  $var wire 1 - Ebreak $end
  $var wire 32 . test_num [31:0] $end
  $var wire 32 / pass_count [31:0] $end
  $var wire 32 0 fail_count [31:0] $end
  $scope module dut $end
   $var wire 7 # op [6:0] $end
   $var wire 3 $ funct3 [2:0] $end
   $var wire 1 % funct7b5 $end
   $var wire 1 & ZeroE $end
   $var wire 1 ' BranchE $end
   $var wire 1 ( JumpE $end
   $var wire 1 ) ALUResultEb0 $end
   $var wire 12 * funct12 [11:0] $end
   $var wire 2 3 ResultSrcD [1:0] $end
   $var wire 2 4 ALUSrcD [1:0] $end
   $var wire 1 5 MemWriteD $end
   $var wire 1 + PCSrcE $end
   $var wire 1 6 RegWriteD $end
   $var wire 1 7 JumpD $end
   $var wire 1 8 BranchD $end
   $var wire 3 9 ImmSrcD [2:0] $end
   $var wire 4 : ALUControlD [3:0] $end
   $var wire 1 , Ecall $end
   $var wire 1 - Ebreak $end
   $var wire 2 ; ALUOp [1:0] $end
   $scope module ad $end
    $var wire 1 1 opb5 $end
    $var wire 3 $ funct3 [2:0] $end
    $var wire 1 % funct7b5 $end
    $var wire 2 ; ALUOp [1:0] $end
    $var wire 1 < ALUSrcDb1 $end
    $var wire 4 : ALUControlD [3:0] $end
    $var wire 1 2 RtypeSub $end
   $upscope $end
   $scope module bd $end
    $var wire 7 # op [6:0] $end
    $var wire 3 $ funct3 [2:0] $end
    $var wire 1 & ZeroE $end
    $var wire 1 ) ALUResultEb0 $end
    $var wire 1 + PCSrcE $end
   $upscope $end
   $scope module md $end
    $var wire 7 # op [6:0] $end
    $var wire 1 6 RegWriteD $end
    $var wire 1 7 JumpD $end
    $var wire 1 8 BranchD $end
    $var wire 1 5 MemWriteD $end
    $var wire 2 3 ResultSrcD [1:0] $end
    $var wire 2 4 ALUSrcD [1:0] $end
    $var wire 3 9 ImmSrcD [2:0] $end
    $var wire 2 ; ALUOp [1:0] $end
    $var wire 13 = controls [12:0] $end
   $upscope $end
   $scope module sd $end
    $var wire 7 # op [6:0] $end
    $var wire 12 * funct12 [11:0] $end
    $var wire 1 , Ecall $end
    $var wire 1 - Ebreak $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0110011 #
b000 $
0%
0&
0'
0(
0)
b000000000000 *
0+
0,
0-
b00000000000000000000000000000001 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
11
02
b00 3
b00 4
05
16
07
08
b010 9
b0000 :
b10 ;
0<
b1010000000100 =
#1000
1%
b00000000000000000000000000000010 .
b00000000000000000000000000000001 /
12
b0001 :
#2000
b001 $
0%
b00000000000000000000000000000011 .
b00000000000000000000000000000010 /
02
b0110 :
#3000
b010 $
b00000000000000000000000000000100 .
b00000000000000000000000000000011 /
b0101 :
#4000
b0010011 #
b000 $
b00000000000000000000000000000101 .
b00000000000000000000000000000100 /
01
b01 4
b000 9
b0000 :
b1000010000100 =
#5000
b010 $
b00000000000000000000000000000110 .
b00000000000000000000000000000101 /
b0101 :
#6000
b0000011 #
b00000000000000000000000000000111 .
b00000000000000000000000000000110 /
b01 3
b0000 :
b00 ;
b1000010010000 =
#7000
b0100011 #
b00000000000000000000000000001000 .
b00000000000000000000000000000111 /
11
b00 3
15
06
b001 9
b0001011000000 =
#8000
b1100011 #
b000 $
1&
1'
1+
b00000000000000000000000000001001 .
b00000000000000000000000000001000 /
b00 4
05
18
b010 9
b0001 :
b01 ;
b0010000001010 =
#9000
0&
0+
b00000000000000000000000000001010 .
b00000000000000000000000000001001 /
#10000
b100 $
1)
1+
b00000000000000000000000000001011 .
b00000000000000000000000000001010 /
#11000
0)
0+
b00000000000000000000000000001100 .
b00000000000000000000000000001011 /
#12000
b1101111 #
b000 $
0'
1(
1+
b00000000000000000000000000001101 .
b00000000000000000000000000001100 /
b10 3
16
17
08
b011 9
b0000 :
b00 ;
b1011000100001 =
#13000
b1100111 #
b00000000000000000000000000001110 .
b00000000000000000000000000001101 /
b01 4
b000 9
b1000010100001 =
#14000
b0110111 #
0(
0+
b00000000000000000000000000001111 .
b00000000000000000000000000001110 /
b00 3
07
b100 9
b1011 :
b11 ;
b1100010000110 =
#15000
b0010111 #
b00000000000000000000000000010000 .
b00000000000000000000000000001111 /
01
b11 4
b1100 :
1<
b1100110000110 =
#16000
b1110011 #
1,
b00000000000000000000000000010001 .
b00000000000000000000000000010000 /
11
b00 4
06
b110 9
b0000 :
b00 ;
0<
b0110000000000 =
#17000
b000000000001 *
0,
1-
b00000000000000000000000000010010 .
b00000000000000000000000000010001 /
#18000
b00000000000000000000000000010010 /
